---
title: "The Apprentice's Guide to Mastering JavaScript"
created_at: 2013-07-30
featured_image: /images/blog/mastering_javascript/
landscape: true
techs:
  - JavaScript
description: "A guide to understanding key concepts in pursuit of mastering the JavaScript language.  I share the most helpful resources that go beyond basic principles, explaining finer details or philosophies of the language used by seasoned professionals."
keywords: [guide, javascript, learning]
draft: true
---
%h3 Why Am I Writing This?
%p
  JavaScript has been more difficult for me to master than Ruby was (the two languages
  I am currently most fluent in).

  JavaScript is object-oriented but doesn't utilize class-based objects/inheritance as
  in Ruby.

  Finally, there are many JavaScript learning resources available but too many fail to
  give insight into best practices or contain anti-patterns.

  With these considerations in mind, I hope to acheive the following objectives:

%ul.bullet
  %li Clarify the differences between JavaScript's prototypical inheritance and Ruby's class-based inheritance
  %li Identify common methods of object duplication (code re-use) in the JavaScript community
  %li Share resources that I have found helpful and are recognized by the greater JavaScript community

.sticky
  %h4.sticky-title Before We Begin
  %p
    Unless you consider yourself fluent in JavaScript, I highly recommend reading the excellent overview of
    the JavaScript language in
    =succeed('.') do
      %a{ href: 'http://www.ecma-international.org/ecma-262/5.1/#sec-4.2' } section 4.2 of the ECMAScript specification
  %p
    NOTE:
    %a{ href: 'https://en.wikipedia.org/wiki/ECMAScript#History' } JavaScript is an implementation of ECMAScript


%h3 Object Inheritance
%p
  All JavaScript objects that are created inherit properties from a prototype.  If this
  prototype is the null value, then the object does not inherit any properties.  The
  inheritance continues recursively so an object can inherit properties from its prototype's
  prototype.
%p
  The following example is a slightly modified version taken from a good discussion
  over at
  =succeed('.') do
    %a{ href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#Inheritance' } Mozilla Developer Network

=render('_code_block', item: @item, file: 'inheritance', language: 'js')

%p
  Wowzers, that's complicated!  Every inherited property must be set to the object's
  prototype rather than directly to the object.  The constructor of the child class
  must manually call the constructor of the parent class.  Specifying the
  inheritance is fairly verbose
  =surround('(',').') do
    %span.code Apprentice.prototype = new Person();
  Finally, you have to manually reset the constructor pointer.  This is a lot to remember
  to gain the benefit of inheritance so the JavaScript community has mostly turned to
  a concept called object extension.
%h3 Extending Objects
%p
  Extending objects is not directly supported by the core JavaScript language but is
  provided by many popular JavaScript Libraries, including
  =succeed(',') do
    %a{href: 'http://jquery.com/' } jQuery
  %a{ href: 'http://lodash.com/' } Lo-Dash
  (based off of
  =succeed('),') do
    %a{ href: 'http://underscorejs.org/' } Underscore
  =succeed(',') do
    %a{href: 'http://prototypejs.org/' } Prototype
  and others.
%p
  In Object
%h3 Further Reading
%p
  I recommend reading the
  %a{ href: 'http://zeekat.nl/articles/constructors-considered-mildly-confusing.html' } Zeekat blog
  for a more detailed discussion on JavaScript's constructors and prototype chain.
%h3 General JavaScript Resources
%p
  Many online resources for learning JavaScript are not object oriented and do not adhere
  to the best practices of master JavaScript programmers. These are the best resources I
  have found while learning JavaScript.
.section
  %h5 Beginners (little to no experience programming)
  %ul
    %li
      %a{ href: 'http://www.codecademy.com/tracks/javascript' } Code Academy's JavaScript Course
.section
  %h5 Novices
  %ul
    %li
      %a{ href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide' } Mozilla JavaScript Guide
    %li
      %a{ href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference' } Mozilla JavaScript Reference
    %li
      %a{ href: 'http://pivotal.github.io/jasmine/' } Jasmine Testing Framework
    %li
      %a{ href: 'http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript' } The `new` keyword
    %li
      %a{ href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger' } The `debugger` keyword
    %li
      %a{ href: 'http://jquery.com/' } jQuery for DOM Manipulation
.section
  %h5 Almost Fluent JavaScripters
  %ul
    %li
      %a{ href: 'http://www.ecma-international.org/ecma-262/5.1/' } ECMAScript 5.1 Language Specification
      %ul
        %li Especially Sections 1-4, 8, 11, 15, 16
        %li
          %a{ href: 'http://ecma-international.org/memento/TC39-M.htm' } ECMAScript 6 is scheduled for release in December 2013
    %li
      %a{ href: 'http://karma-runner.github.io/' } Karma Test Runner (Used to be called Testacular)
    %li
      %a{ href: 'http://backbonejs.org/' } Backbone Framework
    %li
      %a{ href: 'http://lodash.com/' } Lo-Dash Utilities
